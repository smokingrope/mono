using System;
using System.IO;
using System.IO.Pipes;
using System.Diagnostics;

namespace MonoTests.System.IO.Pipes
{
	public class T105_Client : PipeTestWrapper
	{
		public static int Main(string[] arguments) {
			return new T105_Client().Execute(arguments);
		}

		public override string TestDescription {
			get {
				return @"Creates an anonymous pipe client stream from the handle passed on the commandline,
 					 reads several lines of text and then exits";
			}
		}

		protected override void DoTest(string[] arguments)
		{
			InheritedContextSwitchTool();
			string handle = null;
			foreach (string arg in arguments)
			{
				if (arg.StartsWith("/handle:")) {
					handle = arg.Substring("/handle:".Length);
				}
			}
			if (handle == null) {
				_log.Error("Usage: /handle:<pipehandle>");
				_log.Error("  pipehandle - handle generated by GetClientHandleAsString()");
				return;
			}

			using (AnonymousPipeClientStream pipeClient = new AnonymousPipeClientStream(PipeDirection.In, handle))
			{
				using (PipeReader reader = new PipeReader(pipeClient)) 
				{
					ContextSwitch();

					_log.Test("Reading stream");
					string result = reader.ReadLine();
					_log.Test("Received message 1: '{0}'", result);
					result = reader.ReadLine();
					_log.Test("Received message 2: '{0}'", result);
					ContextSwitch();
					result = reader.ReadLine();
					_log.Test("Received message 3: '{0}'", result);
					result = reader.ReadLine();
					_log.Test("Received message 4: '{0}'", result);
					result = reader.ReadLine();
					_log.Test("Received message 5: '{0}'", result);
				}
			}
		}
	}
}

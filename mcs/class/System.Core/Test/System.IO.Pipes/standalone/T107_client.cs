using System;
using System.IO;
using System.IO.Pipes;
using System.Diagnostics;
using System.Threading;

namespace MonoTests.System.IO.Pipes
{
  public class T107_Client : PipeTestWrapper
  {
    public static int Main(string[] arguments) {
      return new T107_Client().Execute(arguments);
    }

    public override string TestDescription {
      get {
        return @"Creates an anonymous pipe client stream from the handle passed on the commandline,
                 writes several lines of text and then exits";
      }
    }

    protected override void DoTest(string[] arguments)
    {
      string outHandle = null;
      foreach (string arg in arguments)
      {
        if (arg.StartsWith("/outHandle:")) {
          outHandle = arg.Substring("/outHandle:".Length);
        }
      }
      if (outHandle == null) {
        _log.Error("Usage: /outHandle:<pipehandle>");
        _log.Error("  outHandle - handle generated by GetClientHandleAsString() which will be written to");
        return;
      }

      _log.Test("Setting up streams");

      using (AnonymousPipeClientStream pipeClientOut = new AnonymousPipeClientStream(PipeDirection.Out, outHandle)) {
        _log.Test("Created out client");
        using (PipeWriter writer = new PipeWriter(pipeClientOut))
        {
          _log.Test("Sending line 1");
          writer.WriteLine("PIPE CLIENT STARTED");
          _log.Test("Sending line 2");
          writer.WriteLine("Sending message 1 from pipe client");
          _log.Test("Sending line 3");
          writer.WriteLine("Sending message 2 from pipe client");
          _log.Test("Sending line 4");
          writer.WriteLine("Sending last message from pipe client");
          _log.Test("Sending complete");
        }
        pipeClientOut.WaitForPipeDrain();
      }
    }
  }
}

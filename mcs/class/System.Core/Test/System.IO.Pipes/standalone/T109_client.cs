using System;
using System.IO;
using System.IO.Pipes;
using System.Diagnostics;
using System.Threading;

namespace MonoTests.System.IO.Pipes
{
  public class T109_Client : PipeTestWrapper
  {
    public static int Main(string[] arguments) {
      return new T109_Client().Execute(arguments);
    }

    public override string TestDescription {
      get {
        return @"Creates an anonymous pipe client stream from the handle passed on the commandline,
                 synchronizes with the server,
                 sends several requests to the server, 
                 awaiting each message to be consumed before sending the next, then exits";
      }
    }


    protected override void DoTest(string[] arguments)
    {
      InheritedContextSwitchTool();
      string inHandle = null;
      string outHandle = null;
      foreach (string arg in arguments)
      {
        if (arg.StartsWith("/inHandle:")) {
          inHandle = arg.Substring("/inHandle:".Length);
        }
        if (arg.StartsWith("/outHandle:")) {
          outHandle = arg.Substring("/outHandle:".Length);
        }
      }
      if (inHandle == null) {
        _log.Error("Usage: /inHandle:<pipehandle>");
        _log.Error("Usage: /outHandle:<pipehandle>");
        _log.Error("  inHandle - handle generated by GetClientHandleAsString() which will be read from");
        _log.Error("  outHandle - handle generated by GetClientHandleAsString() which will be written to");
        return;
      }

      _log.Test("Setting up streams");

      using (AnonymousPipeClientStream pipeClientIn = new AnonymousPipeClientStream(PipeDirection.In, inHandle))
      using (var pipeClientOut = new AnonymousPipeClientStream(PipeDirection.Out, outHandle)) {
        _log.Test("Created client streams");
        using (PipeReader reader = new PipeReader(pipeClientIn))
        using (PipeWriter writer = new PipeWriter(pipeClientOut))
        {
          _log.Test("Begin synchronizing with server");
          writer.WriteLine("CLIENT STARTED");
          ContextSwitch();
          string result = reader.ReadLine();
          if (result != "SERVER STARTED") {
            _log.Error("UNEXPECTED MESSAGE WHILE SYNCHRONIZING '{0}'", result);
            return;
          }
          _log.Test("Synchronization completed with message '{0}'", result);

          ContextNatural();
          for (int i = 0; i < 4; ++i) {
            _log.Test("Sending message {0}", i);
            writer.WriteLine("Message " + i);
            _log.Info("Completed sending message {0} at {1:O}", i, DateTime.Now);
            pipeClientOut.WaitForPipeDrain();
            _log.Info("Detected message {0} received at {1:O}", i, DateTime.Now);
          }
          ContextEnroll();
          ContextSwitch();
          _log.Test("Completed receiving messages ");
        }
        _log.Test("Disposed pipe utils");
      }
      _log.Test("Disposed Pipe Streams");
    }
  }
}

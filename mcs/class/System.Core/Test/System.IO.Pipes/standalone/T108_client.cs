using System;
using System.IO;
using System.IO.Pipes;
using System.Diagnostics;
using System.Threading;

namespace MonoTests.System.IO.Pipes
{
  public class T108_Client : PipeTestWrapper
  {
    public static int Main(string[] arguments) {
      return new T108_Client().Execute(arguments);
    }

    public override string TestDescription {
      get {
        return @"Creates an anonymous pipe client stream from the handle passed on the commandline,
                 reads several lines of text and then exits";
      }
    }

    protected override void DoTest(string[] arguments)
    {
      InheritedContextSwitchTool();
      string inHandle = null;
      foreach (string arg in arguments)
      {
        if (arg.StartsWith("/inHandle:")) {
          inHandle = arg.Substring("/inHandle:".Length);
        }
      }
      if (inHandle == null) {
        _log.Error("Usage: /inHandle:<pipehandle>");
        _log.Error("  inHandle - handle generated by GetClientHandleAsString() which will be written to");
        return;
      }

      _log.Test("Setting up streams");

      using (AnonymousPipeClientStream pipeClientIn = new AnonymousPipeClientStream(PipeDirection.In, inHandle)) {
        _log.Test("Created in client");
        using (PipeReader reader = new PipeReader(pipeClientIn))
        {
          ContextSwitch();
          ContextNatural();

          _log.Test("Reading first line from server");
          string result = reader.ReadLine();
          _log.Test("Received first line from server '{0}'", result);
          result = reader.ReadLine();
          _log.Test("Received second line from server '{0}'", result);
 
          ContextEnroll();
        }
        _log.Test("Disposed stream readaer");
      }
      _log.Test("Disposed Pipe client stream");
    }
  }
}
